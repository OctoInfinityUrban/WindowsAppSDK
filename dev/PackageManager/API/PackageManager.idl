// Copyright (c) Microsoft Corporation and Contributors.
// Licensed under the MIT License.

#include <TerminalVelocityFeatures-PackageManager.h>

import "M.AM.DynamicDependency.idl";

namespace Microsoft.Windows.Management.Deployment
{
    runtimeclass PackageVolume;

    [feature(Feature_PackageManager)]
    [contractversion(1)]
    apicontract PackageDeploymentContract{};

    // How should we handle deployment operations?
    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    enum DeploymentProcessingModel
    {
        Sequential,
        Parallel
    };

    // Do deployment operations need non-default priority?
    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    enum DeploymentPriority
    {
        // Default? Caller?
        Low,
        Normal,
        Immediate
    };

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageVolumeStatus
    {
        PackageVolumeStatus();

        Boolean IsOK;
        Boolean IsOffline;
        Boolean IsBroken;
    };

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageVolume
    {
        PackageVolume();

        Boolean IsSystemVolume{ get; };
        String MountPoint{ get; };
        String Name{ get; };
        String PackageStorePath{ get; };
        Boolean SupportsHardLinks{ get; };
        Boolean IsFullTrustPackageSupported{ get; };
        Boolean IsAppxInstallSupported{ get; };

        PackageVolumeStatus Status { get; };

        void FixMe();
    };

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageVolumeManager
    {
        static IVector<PackageVolume> FindPackageVolumes();

        static PackageVolume FindPackageVolumeByPath(String path);

        static PackageVolume FindPackageVolumeByMediaId(String mediaId);

        static PackageVolume FindPackageVolumeByName(String name);
    };

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSetItem
    {
        PackageSetItem();

        // Unique id
        String Id;  //required

        // Package criteria to identify if a matching package is ready for use and to use at runtime
        String PackageFamilyName;                           //required
        Windows.ApplicationModel.PackageVersion MinVersion; //required
        Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyProcessorArchitectures ProcessorArchitectureFilter;

        // Source where a package can be retrieved from if/when needed for install, remediation, etc
        Windows.Foundation.Uri PackageUri;

        // ??? Additional info potentially needed for deployment operations
        //TODO see AddPackageOptions

        // Additional info for runtime use
        //TODO see CreatePackageDependencyOptions
        //TODO see AddPackageDependencyOptions
    }

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSet
    {
        PackageSet();

        // Unique id
        String Id;

        // Package(s) in the set
        IVector<PackageSetItem> PackageSetItems { get; };
    }

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSetItemRuntimeDisposition
    {
        PackageSetItemRuntimeDisposition();

        String PackageSetItemId{ get; };
        String PackageFullName{ get; };
        String PackageDependencyId{ get; };
        Microsoft.Windows.ApplicationModel.DynamicDependency.PackageDependencyContextId PackageDependencyContextId{ get; };
    }

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSetRuntimeDisposition
    {
        PackageSetRuntimeDisposition();

        String PackageSetId;
        IVector<PackageSetItemRuntimeDisposition> PackageSetItemRuntimeDispositions { get; };
    }

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass FindPackageSetOptions
    {
        FindPackageSetOptions();

        //TODO
        Boolean TODO_MustHaveAtLeastOneInterfaceOrStaticFactoryPlaceholder;
    }

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSetManager
    {
        static PackageSetManager GetDefault();

        void Add(PackageSet packageSet);  		                // Create/Write/Save
        void Update(PackageSet packageSet);  		            // Update/Write/Save
        void Remove(String packageSetId);		                // Delete
        PackageSet Get(String packageSetId);		            // Read/Load
        IVector<PackageSet> Find(FindPackageSetOptions options);// Enumerate
    };

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    enum PackageDeploymentStatus
    {
        InProgress = 0,         // The request is in progress
        CompletedSuccess = 1,   // The request completed successfully
        CompletedFailure = 2,   // The request failed with some critical internal error. //TODO:Check ExtendedError for HRESULT
    };

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    enum PackageDeploymentProgressStatus
    {
        Queued = 0,             // The request is queued
        InProgress = 1,         // The request is in progress
        CompletedSuccess = 2,   // The request completed successfully
        CompletedFailure = 3,   // The request failed with some critical internal error. //TODO:Check ExtendedError for HRESULT
    };

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageDeploymentProgress
    {
        PackageDeploymentProgressStatus status;
        Double percentage;
    }

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageDeploymentResult
    {
        PackageDeploymentStatus Status { get; };
        HRESULT ExtendedError { get; };
        Boolean IsRegistered{ get; };
        Guid ActivityId { get; };
    }

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    enum StubPackageOption
    {
        Default,
        InstallFull,
        InstallStub,
        UsePreference,
    };

    // Requires Windows >- 10.0.19041.0 (aka 2004 aka 20H1)
    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass AddPackageOptions
    {
        AddPackageOptions();

        PackageVolume TargetVolume;
        IVector<Windows.Foundation.Uri> DependencyPackageUris { get; };
        IVector<String> OptionalPackageFamilyNames { get; };
        IVector<Windows.Foundation.Uri> OptionalPackageUris { get; };
        IVector<Windows.Foundation.Uri> RelatedPackageUris { get; };
        Windows.Foundation.Uri ExternalLocationUri;
        Microsoft.Windows.Management.Deployment.StubPackageOption StubPackageOption;
        Boolean AllowUnsigned;
        Boolean DeveloperMode;
        Boolean ForceAppShutdown;
        Boolean ForceTargetAppShutdown;
        Boolean ForceUpdateFromAnyVersion;
        Boolean InstallAllResources;
        Boolean RequiredContentGroupOnly;
        Boolean RetainFilesOnFailure;
        Boolean StageInPlace;
        Boolean DeferRegistrationWhenPackagesAreInUse;

        Boolean IsExpectedDigestsSupported { get; };            // Requires Windows >= 10.0.22621.0 (aka Win11 22H2)
        IMap<Windows.Foundation.Uri, String> ExpectedDigests{ get; };

        Boolean IsLimitToExistingPackagesSupported { get; };    // Requires Windows >= 10.0.22621.0 (aka Win11 22H2)
        Boolean LimitToExistingPackages;
    }

    // Requires Windows >- 10.0.19041.0 (aka 2004 aka 20H1)
    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass AddPackageSetOptions
    {
        AddPackageSetOptions();

        DeploymentProcessingModel DeploymentProcessingModel;
        DeploymentPriority DeploymentPriority;
        AddPackageOptions AddPackageOptions;
    }

    // Requires Windows >- 10.0.19041.0 (aka 2004 aka 20H1)
    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass StagePackageOptions
    {
        StagePackageOptions();

        PackageVolume TargetVolume;
        IVector<Windows.Foundation.Uri> DependencyPackageUris { get; };
        IVector<String> OptionalPackageFamilyNames { get; };
        IVector<Windows.Foundation.Uri> OptionalPackageUris { get; };
        IVector<Windows.Foundation.Uri> RelatedPackageUris { get; };
        Windows.Foundation.Uri ExternalLocationUri;
        Microsoft.Windows.Management.Deployment.StubPackageOption StubPackageOption;
        Boolean DeveloperMode;
        Boolean ForceUpdateFromAnyVersion;
        Boolean InstallAllResources;
        Boolean RequiredContentGroupOnly;
        Boolean StageInPlace;
        Boolean AllowUnsigned;

        Boolean IsExpectedDigestsSupported { get; };            // Requires Windows >= 10.0.22621.0 (aka Win11 22H2)
        IMap<Windows.Foundation.Uri, String> ExpectedDigests{ get; };
    }

    // Requires Windows >- 10.0.19041.0 (aka 2004 aka 20H1)
    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass RegisterPackageOptions
    {
        RegisterPackageOptions();

        PackageVolume AppDataVolume;
        IVector<Windows.Foundation.Uri> DependencyPackageUris { get; };
        IVector<String> OptionalPackageFamilyNames { get; };
        Windows.Foundation.Uri ExternalLocationUri;
        Boolean DeveloperMode;
        Boolean ForceAppShutdown;
        Boolean ForceTargetAppShutdown;
        Boolean ForceUpdateFromAnyVersion;
        Boolean InstallAllResources;
        Boolean StageInPlace;
        Boolean AllowUnsigned;
        Boolean DeferRegistrationWhenPackagesAreInUse;

        Boolean IsExpectedDigestsSupported { get; };            // Requires Windows >= 10.0.22621.0 (aka Win11 22H2)
        IMap<Windows.Foundation.Uri, String> ExpectedDigests{ get; };
    }

    // Requires Windows >- 10.0.19041.0 (aka 2004 aka 20H1)
    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass RemovePackageOptions
    {
        RemovePackageOptions();

        Boolean PreserveApplicationData;
        Boolean PreserveRoamableApplicationData;
        Boolean RemoveForAllUsers;
        DeploymentPriority Priority;
    }

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass EnsureIsReadyOptions
    {
        EnsureIsReadyOptions();

        // Options influencing deployment if/when needed
        DeploymentProcessingModel DeploymentProcessingModel;
        DeploymentPriority DeploymentPriority;

        // ??? Additional info potentially needed for deployment operations
        //TODO see AddPackageOptions
        //TODO see RegisterPackageOptions
        //TODO see StagePackageOptions

        // Additional info for runtime use
        //TODO see CreatePackageDependencyOptions
        //TODO see AddPackageDependencyOptions
    }

    // The API surface is strongly consistent:
    // 1. Modification operations involving incoming packages...
    //      - <verb>PackageAsync       (string, options)
    //      - <verb>PackageByUriAsync  (uri, options)
    //      - <verb>PackageSetAsync    (packageset, options)
    //      - <verb>PackageSetByIdAsync(id, options)
    //    where
    //      <verb> = Add | Register | Stage
    //      Parameter string for...
    //          Add      = path | uri
    //          Register = path | uri | packagefullname | packagefamilyname
    //          Stage    = path | uri
    // 2. Modification operations involving existing packages...
    //      - <verb>PackageAsync                   (string, options)
    //      - <verb>PackageByPackageFamilyNameAsync(string, options)
    //      - <verb>PackageByPackageFullNameAsync  (string, options)
    //    where
    //      <verb> = Deprovision | Provision | Register | Remove
    //      Parameter string for...
    //          Deprovision = packagefamilyname
    //          Provision   = packagefamilyname
    //          Register    = packagefamilyname | packagefullname | path\appxmanifest.xml | path containing appxmanifest.xml | file://path/appxmanifest.xml | file://path containing appxmanifest.xml
    //          Remove      = packagefamilyname | packagefullname
    //
    // TODO: AppInstaller
    // TODO: Move
    // TODO: Find
    // TODO: Properties (Status, StubPreference)
    // TODO: RequestAdd
    //
    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageDeploymentManager
    {
        // Get an instance of the manager
        static PackageDeploymentManager GetDefault();

        // Return true if the necessary package(s) are present and available for use
        Boolean IsPackageSetReady(PackageSet packageSet);

        Boolean IsPackageSetReadyById(String packageSetId);

        // Check if the necessary package(s) are present
        // and available for use and if not then Make It So.
        // If the necessary packages(s) are not present on the system
        // then make them available (download, install, etc).
        // If the necessary packages are present and available this is equivalent to IsReady(id).
        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        EnsurePackageSetIsReadyAsync(PackageSet packageSet, EnsureIsReadyOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        EnsurePackageSetIsReadyByIdAsync(String packageSetId, EnsureIsReadyOptions options);

        // Add packages
        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        AddPackageAsync(String package, AddPackageOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        AddPackageByUriAsync(Windows.Foundation.Uri packageUri, AddPackageOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        AddPackageSetAsync(PackageSet packageSet, AddPackageSetOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        AddPackageSetByIdAsync(String packageSetId, AddPackageSetOptions options);

        // Remove packages
        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        RemovePackageAsync(String package, RemovePackageOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        RemovePackageByFullNameAsync(String packageFullName, RemovePackageOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        RemovePackageByFamilyNameAsync(String packageFamilyName, RemovePackageOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        RemovePackageSetAsync(PackageSet packageSet, RemovePackageOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        RemovePackageSetByIdAsync(String packageSetId, RemovePackageOptions options);

        // Ditto PackageSet operations of Stage, Register, Repair, Reset
    }

    [feature(Feature_PackageManager)]
    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageRuntimeManager
    {
        // Get an instance of the manager
        static PackageRuntimeManager GetDefault();

        // Make the package(s) in the package set available to the calling process
        // i.e. dynamically add the package(s) in the package set to the caller's package graph.
        // This is equivalent to
        //   FOREACH p IN PackageSetManager.Get(id).PackageSetItems
        //       pd = TryCreatePackageDependency(p)
        //       AddPackageDependency(pd)

        Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition AddPackageSet(
            PackageSet packageSet);

        [method_name("AddPackageSetWithOptions")]
        Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition AddPackageSet(
            PackageSet packageSet,
            Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions createOptions,
            Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions addOptions);

        Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition AddPackageSetById(
            String packageSetId);

        [method_name("AddPackageSetByIdWithOptions")]
        Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition AddPackageSetById(
            String packageSetId,
            Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions createOptions,
            Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions addOptions);

        void RemovePackageSet(
            Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition packageSetRuntimeDisposition);
    }
}
