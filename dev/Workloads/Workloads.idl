// Copyright (c) Microsoft Corporation and Contributors.
// Licensed under the MIT License.

#include <TerminalVelocityFeatures-Workloads.h>

namespace Microsoft.Windows.System.Workloads
{
    [contractversion(1)]
    apicontract WorkloadsContract{};

    [contract(WorkloadsContract, 1)]
    enum WorkloadStatus
    {
        InProgress = 0,         // The request is in progress
        CompletedSuccess = 1,   // The request completed successfully
        CompletedFailure = 2,   // The request failed with some critical internal error.
                                // See ExtendedError for HRESULT
    };

    [contract(WorkloadsContract, 1)]
    runtimeclass WorkloadResult
    {
        WorkloadStatus Status { get; };
        HRESULT Error { get; };
        HRESULT ExtendedError { get; };
        String ErrorText { get; };
    }

    [contract(WorkloadsContract, 1)]
    enum WorkloadProgressStatus
    {
        Queued = 0,             // The request is queued
        InProgress = 1,         // The request is in progress
        CompletedSuccess = 2,   // The request completed successfully
        CompletedFailure = 3,   // The request failed with a critical internal error
                                // See ExtendedError for HRESULT
    };

    [contract(WorkloadsContract, 1)]
    struct WorkloadProgress
    {
        WorkloadProgressStatus Status;
        Double Progress;
    };

    [contract(WorkloadsContract, 1)]
    interface IWorkloadHandler
    {
        /// Remove the workload
        Windows.Foundation.IAsyncOperationWithProgress<WorkloadResult, WorkloadProgress>
        RemoveWorkloadAsync();
    }

    [contract(WorkloadsContract, 1)]
    runtimeclass Workload
    {
        /// Return the Id for all workloads
        static IVector<String> FindIds();

        /// Return a workload
        static Workload GetWorkload(String id);

        /// Return the unique identifier for this workload
        String Id { get; };

        /// Return the rank for this workload
        Int32 Rank { get; };

        /// Return the localized display name for this workload
        String DisplayName { get; };

        /// Return true if the workload supports Remove.
        Boolean CanRemove();

        /// Remove the workload
        Windows.Foundation.IAsyncOperationWithProgress<WorkloadResult, WorkloadProgress>
        RemoveWorkloadAsync();
    }
}
