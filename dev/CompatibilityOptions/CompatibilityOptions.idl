// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

#include <TerminalVelocityFeatures-CompatibilityOptions.h>

namespace Microsoft.Windows.ApplicationModel.WindowsAppRuntime
{
    [contractversion(1)]
    apicontract CompatibilityContract {};

    [contract(CompatibilityContract, 1), feature(Feature_CompatibilityOptions)]
    struct WindowsAppRuntimeVersion
    {
        UInt32 Major;
        UInt32 Minor;
        UInt32 Patch;
    };

    /// This object is used by the app to configure any desired compatibility options
    /// for Windows App Runtime behavior of changes added in servicing updates. This
    /// object is only used to set the runtime behavior and can't be used to query the
    /// applied settings.
    // TODO: Get agreement and add a generic Feature_Experimental
    [contract(CompatibilityContract, 1), feature(Feature_CompatibilityOptions)]
    runtimeclass CompatibilityOptions
    {
        CompatibilityOptions();

        /// An optional patch mode to use if the runtime version matches the major.minor version.
        WindowsAppRuntimeVersion PatchMode1 { get; set; };

        /// An optional patch mode to use if the runtime version matches the major.minor version.
        WindowsAppRuntimeVersion PatchMode2 { get; set; };

        /// An optional list of specific servicing changes to disable.
        IVector<UInt64> DisabledChanges{ get; };

        /// Apply the compatibility options to the runtime.
        void Apply();
    }
}
