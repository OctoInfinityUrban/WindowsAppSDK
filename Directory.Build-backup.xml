<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. See LICENSE in the project root for license information. -->
<!-- This is a special MSBuild file that is parsed before everything else when MSBuild detects it in our directory structure.
     Adding Sdk="Microsoft.NET.Sdk" to a project causes NuGet files to be generated very early on, so we need these defines to be here
     to ensure that all of our build output files end up in the same location.  This is parsed too late when put in mux.controls.props. -->
<Project InitialTargets="DirectoryBuildPropsInfo" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition="$(BuildingWithBuildExe) != 'true'">
    <IsTDPConfiguration>false</IsTDPConfiguration>

    <BaseOutputPath>$(MSBuildThisFileDirectory)BuildOutput\$(Configuration)</BaseOutputPath>

    <AppxBundle>Never</AppxBundle>

    <GeneratedFilesDir>$(BaseIntermediateOutputPath)Generated Files\</GeneratedFilesDir>
    <GenerateProjectSpecificOutputFolder>True</GenerateProjectSpecificOutputFolder>

    <ForceImportAfterCppTargets>$(MSBuildThisFileDirectory)PostBuild.targets</ForceImportAfterCppTargets>
  </PropertyGroup>

  <!-- Compilation differs for the build pipeline vs local development -->
  <PropertyGroup Condition="$(ProjectReunionBuildPipeline) != '1'">
    <!-- If not set, default it to no . -->
    <ProjectReunionBuildPipeline>0</ProjectReunionBuildPipeline>
  </PropertyGroup>

  <Target Name="DirectoryBuildPropsInfo">
    <PropertyGroup>
      <!-- Set these during the target to ensure it is scheduled after PlatformTarget is populated. -->
      <!-- Use PlatformTarget instead of Platform to keep things more consistent (avoid 'Win32' as a build output) -->
      <!-- <OutDir>$(BaseOutputPath)$(PlatformTarget)\</OutDir>
      <OutputPath>$(OutDir)\$(MSBuildProjectName)\</OutputPath>
      <AppxPackageDir>$(OutDir)\AppxPackages</AppxPackageDir> -->
    </PropertyGroup>
    <Message  Condition="$(ProjectReunionBuildPipeline) == '1'" Importance="High" Text="Directory.Build.props detects ProjectReunionBuildPipeline=$(ProjectReunionBuildPipeline)"/>

    <Message Importance="High" Text="Directory.Build.props: BaseOutputPath=$(BaseOutputPath)"/>
    <Message Importance="High" Text="Directory.Build.props: OutDir=$(OutDir)"/>
  </Target>

  <!-- Conditional behavior for build pipeline vs local development -->
  <ItemDefinitionGroup Condition="$(ProjectReunionBuildPipeline) == '1'">
    <ClCompile>
      <PreprocessorDefinitions>PROJECTREUNION_BUILD_PIPELINE=1;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(SolutionDir)\build\override;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>PROJECTREUNION_BUILD_PIPELINE=1;%(PreprocessorDefinitions);</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(SolutionDir)\build\override;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <PreprocessorDefinitions>PROJECTREUNION_BUILD_PIPELINE=1;%(PreprocessorDefinitions);</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(SolutionDir)\build\override;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </Midl>
  </ItemDefinitionGroup>
</Project>
