steps:
###
# This step downloads the WindowsAppSDK NuGet package from last successful build of the Aggregator's Nightly build
# for use in building the installers
- task: DownloadPipelineArtifact@2
  displayName: 'Download WindowsAppSDK'
  inputs:
    artifactName: 'WindowsAppSDK_Nuget_And_MSIX'
    targetPath: '$(System.ArtifactsDirectory)'
    source: 'specific'
    project: $(System.TeamProjectId)
    pipeline: 118002         
    runVersion: 'latestFromBranch'
    runBranch: "refs/heads/main"

###
# Install the internal licensing support for release-signed packages. This can always be present in
# pipeline builds. The installer code will automatically degrade / skip licenses in non-release builds

# Future: this stage only requires a the app licensing internal package, but is downloading all transport packages
# used for aggregation consider refactoring for efficiency.
- task: PowerShell@2
  name: ConvertVersionDetailsToPackageConfig
  displayName: "Convert VersionDetails To PackageConfig"
  inputs:
    filePath: '$(Build.SourcesDirectory)\build\Scripts\ConvertVersionDetailsToPackageConfig.ps1'
    arguments: -versionDetailsPath '$(Build.SourcesDirectory)\eng\Version.Details.xml' -packageConfigPath '$(Build.SourcesDirectory)\build\packages.config'

- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: RestoreNuGetPackages
  inputs:
    restoreSolution: $(Build.SourcesDirectory)/build/packages.config
    feedsToUse: config
    nugetConfigPath: $(Build.SourcesDirectory)/nuget.config
    restoreDirectory: packages

- task: powershell@2
  displayName: 'Create test pfx to sign MSIX test packages (DevCheck)'
  inputs:
    targetType: filePath
    filePath: eng\common\DevCheck.ps1
    arguments: -NoInteractive -Offline -Verbose -CertPassword 'BuildPipeline' -CheckTestPfx -Clean
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Install test certificate for MSIX test packages (DevCheck)'
  inputs:
    targetType: filePath
    filePath: eng\common\DevCheck.ps1
    arguments: -NoInteractive -Offline -Verbose -CheckTestCert
    workingDirectory: '$(Build.SourcesDirectory)'

# Copy license files into the InstallerInput directory. License files should be named consistently with the
# package naming used in the installer. See build\Scripts\ExtractMSIXFromNuget.ps1 for specifics.
# e.g.
#   main_license.xml, singleton_license.xml, etc.
- task: CopyFiles@2
  displayName: 'Copy licenses to target folder'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\build\packages\$(AppLicensingInternalPackageName).$(AppLicensingInternalPackageVersion)\licenses'
    Contents: |
      *.xml
    TargetFolder: '$(Build.SourcesDirectory)\InstallerInput'
    flattenFolders: false

# Copy license installation header into the correct installer source location.
- task: CopyFiles@2
  displayName: 'Extract files needed for Nuget package'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\build\packages\$(AppLicensingInternalPackageName).$(AppLicensingInternalPackageVersion)\src'
    Contents: |
      *.h
    TargetFolder: '$(Build.SourcesDirectory)\installer\dev'
    flattenFolders: false
    overWrite: true

###
# Copy MSIX packages from build artifacts into the installer content location and create
# header to include contents into package.

- task: PowerShell@2
  displayName: ExtractMSIXPackagesFromNuget
  inputs:
    filePath: '$(Build.SourcesDirectory)\build\scripts\ExtractMSIXFromNuget.ps1'
    arguments: >
      -Source '$(System.ArtifactsDirectory)'
      -Dest '$(Build.SourcesDirectory)\InstallerInput'

- task: PowerShell@2
  displayName: CreateInstallerOverrideHeader
  inputs:
    filePath: '$(Build.SourcesDirectory)\build\Scripts\CreateInstallerOverrideHeader.ps1'
    arguments: >
      -SourceFolder '$(Build.SourcesDirectory)\InstallerInput'
      -DestinationFolder '$(Build.SourcesDirectory)\InstallerInput'

# NuGetCommand@2
- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'Restore Windows App Runtime Install Nuget'
  inputs:
    command: 'restore'
    restoreSolution: installer\WindowsAppRuntimeInstall.sln
    feedsToUse: config
    nugetConfigPath: $(Build.SourcesDirectory)\nuget.config

- task: CopyFiles@2
  displayName: 'Copy installer override header'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\InstallerInput'
    Contents: |
      windowsappruntime_definitions_override.h
    TargetFolder: installer\dev
    flattenFolders: false

- task: NuGetAuthenticate@1
  displayName: "NuGet authenticate to restore Microsoft.Telemetry.Inbox.Native"
  inputs:
    nuGetServiceConnections: "TelemetryInternal"

# NuGetCommand@2
- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: "NuGet restore Microsoft.Telemetry.Inbox.Native package"
  inputs:
    command: "custom"
    arguments:
        'restore $(Build.SourcesDirectory)\installer\dev\telemetry\packages.config -ConfigFile $(Build.SourcesDirectory)\nuget.config -PackagesDirectory $(Build.SourcesDirectory)\packages'

# Overwrite wil\Traceloggingconfig.h content in public nuget with that of MicrosoftTelemetry.h from internal nuget
# This step enables telemetry in the Installer
- task: powershell@2
  name: OverwriteWILTraceLoggingWithMicrosoftInternalContent
  inputs:
    targetType: "inline"
    script: |
        $srcPath = Get-Childitem -Path '$(Build.SourcesDirectory)\packages\' -File 'MicrosoftTelemetry.h' -Recurse
        if ($srcPath -ne $null)
        {
          $destinationPaths = Get-Childitem -Path '$(Build.SourcesDirectory)\packages\' -File 'Traceloggingconfig.h' -Recurse
          if ($destinationPaths -ne $null)
          {
            foreach ($destPath in $destinationPaths)
            {
              Copy-Item -Force $srcPath.FullName $destPath.FullName
            }
          }
          else
          {
            Write-Host Did not find the destination wil/traceloggingconfig.h under $(Build.SourcesDirectory)\packages\
            Get-Childitem -Path '$(Build.SourcesDirectory)\packages\' -Recurse
          }
        }
        else
        {
          Write-Host Did not find the source MicrosoftTelemetry.h under $(Build.SourcesDirectory)\packages\
          Get-Childitem -Path '$(Build.SourcesDirectory)\packages\' -Recurse
        }

# Extract Microsoft.WindowsAppSDK Nuget package artifact published by BuildWindowsAppSDKPackages job of Aggregate stage,
# that runs before the current CreateInstaller stage in the same build pipeline, to the installer's packages folder.
# And copy WindowsAppSDK-VersionInfo.h from the extracted nuget package to installer's project folder
- task: powershell@2
  name: ExtractWinAppSDKNugetPackage
  inputs:
    targetType: "inline"
    script: |
      $srcWinAppSDKNupkgPath = Get-Childitem -Path '$(System.ArtifactsDirectory)\NugetPackages' -File '*Microsoft.WindowsAppSDK*'
      Copy-Item -Force $srcWinAppSDKNupkgPath.FullName '$(Build.SourcesDirectory)\packages\'
      $destWinAppSDKNupkgPath = Get-Childitem -Path '$(Build.SourcesDirectory)\packages\' -File '*Microsoft.WindowsAppSDK*'
      $winAppSDKZip = $destWinAppSDKNupkgPath.FullName -replace '.nupkg','.zip'
      Rename-Item -Path $destWinAppSDKNupkgPath.FullName -NewName $winAppSDKZip
      Expand-Archive $winAppSDKZip -DestinationPath ($destWinAppSDKNupkgPath.Directory.FullName + '\' + $destWinAppSDKNupkgPath.BaseName)
      Copy-Item -Force ($destWinAppSDKNupkgPath.Directory.FullName + '\' + $destWinAppSDKNupkgPath.BaseName + "\include\WindowsAppSDK-VersionInfo.h") '$(Build.SourcesDirectory)\installer\dev\'

- task: WinUndockNativeCompiler@1
  displayName: 'Setup native compiler version override'
  inputs:
    microsoftDropReadPat: $(System.AccessToken)
    compilerPackageName: $(compilerOverridePackageName)
    compilerPackageVersion: $(compilerOverridePackageVersion)
    slnDirectory: $(Build.SourcesDirectory)\installer\dev

- task: VSBuild@1
  displayName: 'Build Windows App Runtime Install'
  inputs:
    solution: installer\dev\WindowsAppRuntimeInstall.vcxproj
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Governance Detection'
  inputs:
    scanType: 'Register'
    failOnAlert: true

- task: CopyFiles@2
  displayName: 'Publish Installer'
  inputs:
    SourceFolder: 'BuildOutput'
    TargetFolder: '$(ob_outputDirectory)\Installer'

- task: powershell@2
  displayName: 'Remove test certificate for MSIX test packages (DevCheck)'
  inputs:
    targetType: filePath
    filePath: eng\common\DevCheck.ps1
    arguments: -NoInteractive -Offline -Verbose -RemoveTestCert -RemoveTestPfx
    workingDirectory: '$(Build.SourcesDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(ob_outputDirectory)'
    artifactName: '$(ob_artifactBaseName)'
