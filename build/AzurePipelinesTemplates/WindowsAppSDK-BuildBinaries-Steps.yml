parameters:
- name: "SignOutput"
  type: boolean
  default: False
- name: "IsOneBranch"
  type: boolean
  default: True
- name: runStaticAnalysis
  type: boolean
  default: True

steps:
- task: NuGetToolInstaller@1

- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: 'TelemetryInternal'

- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'NuGet restore of packages'
  inputs:
    command: 'custom'
    arguments: 'restore dev\WindowsAppRuntime_Insights\packages.config -ConfigFile NuGet.config -PackagesDirectory dev\WindowsAppRuntime_Insights\packages'

- template: WindowsAppSDK-SetupBuildEnvironment-Steps.yml
  parameters:
    IsOneBranch: ${{ parameters.IsOneBranch }}

- task: NuGetAuthenticate@1

  # Copy MSIX license installation header into the correct source location.
  # Restore transport package dependencies. This is only enbaled in release-signed builds.
- task: PowerShell@2
  name: ConvertVersionDetailsToPackageConfig
  displayName: "Convert VersionDetails To PackageConfig"
  inputs:
    filePath: '$(REPOROOT)\build\Scripts\ConvertVersionDetailsToPackageConfig.ps1'
    arguments: -versionDetailsPath '$(REPOROOT)\eng\Version.Details.xml' -packageConfigPath '$(REPOROOT)\build\packages.config'

- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: RestoreNuGetPackages
  retryCountOnTaskFailure: 10
  inputs:
    restoreSolution: build/packages.config
    feedsToUse: config
    nugetConfigPath: NuGet.config
    restoreDirectory: packages

- task: CopyFiles@2
  displayName: 'Extract license header to source location'
  inputs:
    SourceFolder: '$(REPOROOT)\build\packages\$(AppLicensingInternalPackageName).$(AppLicensingInternalPackageVersion)\src'
    Contents: |
      *.h
    TargetFolder: '$(REPOROOT)\dev\Licensing'
    flattenFolders: false
    overWrite: true

- task: WinUndockNativeCompiler@1
  displayName: 'Setup native compiler version override'
  inputs:
    microsoftDropReadPat: $(System.AccessToken)
    compilerPackageName: $(compilerOverridePackageName)
    compilerPackageVersion: $(compilerOverridePackageVersion)
    slnDirectory: $(Build.SourcesDirectory)

- task: PowerShell@2
  name: BuildBinaries
  inputs:
    filePath: 'BuildAll.ps1'
    arguments: -Platform "$(buildPlatform)" -Configuration "$(buildConfiguration)" -AzureBuildStep "BuildBinaries"

- ${{ if eq(parameters.runStaticAnalysis, 'True') }}:
  - task: SDLNativeRules@3
    displayName: Run PREfast SDL Native Rules
    condition: and(succeeded(), eq(variables['buildConfiguration'], 'Release'), eq(variables['buildPlatform'], 'x64'))
    inputs:
      setupCommandlines: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsMSBuildCmd.bat"'
      msBuildArchitecture: amd64
      msBuildCommandline: 'msbuild.exe /restore /nologo /nr:false /p:configuration=Release /p:platform=x64 $(Build.SourcesDirectory)\WindowsAppRuntime.sln'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    continueOnError: true

  # Copy build output to folder APIScanTarget for APIScan to scan later, in the mean time, exclude some folders/files.
  - task: CopyFiles@2
    displayName: Populate APIScanTarget
    condition: and(succeeded(), eq(variables['ob_sdl_apiscan_enabled'], 'true'))
    inputs:
      SourceFolder: '$(build.SourcesDirectory)\BuildOutput'
      TargetFolder: '$(build.SourcesDirectory)\APIScanTarget'
      contents: |
        **
        !**\*test*\**
        !**\*packages*\**
        !**\*Demoapp*\**
        !**\*Demopackage\**
        !**\*.json
        !**\*.msix
        !**\*.png
        !**\*.binlog
        !**\*.cs
        !**\*.cpp
        !**\*.idl
        !**\*.h
    continueOnError: true

  #- script: |
  #    dir /s $(Build.SourcesDirectory)\APIScanTarget
  #  displayName: 'DIAG: dir $(Build.SourcesDirectory)\APIScanTarget'
  #  condition: and(succeededOrFailed(), eq(variables['ob_sdl_apiscan_enabled'], 'true'))
  #  continueOnError: true

- ${{ if eq(parameters.SignOutput, 'true') }}:
  - task: EsrpCodeSigning@2
    inputs:
      ConnectedServiceName: 'Project Reunion ESRP Code Signing Connection'
      FolderPath: '$(build.SourcesDirectory)\BuildOutput'
      Pattern: |
        **/*.winmd
        **/*.dll
        **/*.exe
      UseMinimatch: true
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
          {
            "keyCode": "CP-230012",
            "operationSetCode": "SigntoolSign",
            "parameters": [
              {
                "parameterName": "OpusName",
                "parameterValue": "Microsoft"
              },
              {
                "parameterName": "OpusInfo",
                "parameterValue": "http://www.microsoft.com"
              },
              {
                "parameterName": "PageHash",
                "parameterValue": "/NPH"
              },
              {
                "parameterName": "FileDigest",
                "parameterValue": "/fd sha256"
              },
              {
                "parameterName": "TimeStamp",
                "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              }
            ],
            "toolName": "signtool.exe",
            "toolVersion": "6.2.9304.0"
          }
        ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'

# Artifacts are uploaded via ob_outputDirectory where the each vPack Push jobs downloads from
# so the CopyFiles below are to move all the vPack files to the right locations
- task: CopyFiles@2
  displayName: MoveToOutputDirectory
  inputs:
    SourceFolder: '$(build.SourcesDirectory)\BuildOutput'
    TargetFolder: '$(ob_outputDirectory)'

- task: CopyFiles@2
  displayName: MoveToOutputDirectory
  inputs:
    SourceFolder: '$(build.SourcesDirectory)\packages'
    TargetFolder: '$(ob_outputDirectory)\packages'

- ${{ if not( parameters.IsOneBranch ) }}:
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(ob_outputDirectory)'
      artifactName: '$(ob_artifactBaseName)'