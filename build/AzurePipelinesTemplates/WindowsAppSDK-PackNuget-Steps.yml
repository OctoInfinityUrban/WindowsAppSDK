parameters:
- name: "SignOutput"
  type: boolean
  default: False
- name: "IsOneBranch"
  type: boolean
  default: True

steps:
- task: DownloadPipelineArtifact@2
  displayName: 'Download Foundation x64'
  inputs:
    artifactName: "FoundationBinaries_release_x64"
    targetPath: '$(Build.SourcesDirectory)\BuildOutput'
- task: DownloadPipelineArtifact@2
  displayName: 'Download Foundation x86'
  inputs:
    artifactName: "FoundationBinaries_release_x86"
    targetPath: '$(Build.SourcesDirectory)\BuildOutput'
- task: DownloadPipelineArtifact@2
  displayName: 'Download Foundation arm64'
  inputs:
    artifactName: "FoundationBinaries_release_arm64"
    targetPath: '$(Build.SourcesDirectory)\BuildOutput'

- task: DownloadPipelineArtifact@2
  displayName: 'Download Foundation anycpu'
  inputs:
    artifactName: "FoundationBinaries_release_anycpu"
    targetPath: '$(Build.SourcesDirectory)\BuildOutput'

- task: DownloadPipelineArtifact@2
  displayName: 'Download MRT x64'
  inputs:
    artifactName: "MrtBinaries_release_x64"
    targetPath: '$(Build.SourcesDirectory)\BuildOutput'
- task: DownloadPipelineArtifact@2
  displayName: 'Download MRT x86'
  inputs:
    artifactName: "MrtBinaries_release_x86"
    targetPath: '$(Build.SourcesDirectory)\BuildOutput'
- task: DownloadPipelineArtifact@2
  displayName: 'Download MRT arm64'
  inputs:
    artifactName: "MrtBinaries_release_arm64"
    targetPath: '$(Build.SourcesDirectory)\BuildOutput'

- task: PowerShell@2
  name: StageFiles
  inputs:
    filePath: 'BuildAll.ps1'
    arguments: -Platform "x86,x64,arm64" -Configuration "release" -AzureBuildStep "StageFiles"

- task: CopyFiles@2
  displayName: 'Copy symbols to artifact staging directory'
  condition: always()
  inputs:
    sourceFolder: $(Build.SourcesDirectory)\BuildOutput\FullNuget
    contents: |
      **\*.pdb
    targetFolder: $(Build.ArtifactStagingDirectory)\symbols

- task: PublishSymbols@2
  displayName: 'Publish private symbols to internal server (without source indexing)'
  inputs:
    searchPattern: '$(Build.ArtifactStagingDirectory)\symbols\**\*.pdb'
    symbolServerType: 'TeamServices'
  # This ADO task does not support indexing of github sources currently :-(
    indexSources: false
    detailedLog: true
  # There is a bug which causes this task to fail if LIB includes an inaccessible path (even though it does not depend on it).
  # To work around this issue, we just force LIB to be any dir that we know exists.
  env:
    LIB: $(Build.SourcesDirectory)

- task: PublishSymbols@2
  displayName: 'Publish symbols to public server(without source indexing)'
  inputs:
    searchPattern: '$(Build.ArtifactStagingDirectory)\symbols\**\*.pdb'
    symbolServerType: 'TeamServices'
  # This ADO task does not support indexing of github sources currently :-(
    indexSources: false
    detailedLog: true
  # # There is a bug which causes this task to fail if LIB includes an inaccessible path (even though it does not depend on it).
  # # To work around this issue, we just force LIB to be any dir that we know exists.
  # env:
  #   LIB: $(Build.SourcesDirectory)
  #   ArtifactServices_Symbol_AccountName: microsoftpublicsymbols
  #   ArtifactServices_Symbol_PAT: $(WinSDKLab_microsoftpublicsymbols_PAT)

- task: PowerShell@2
  name: SetVersion
  displayName: Update metapackage version
  inputs:
    targetType: 'inline'
    script: |
      $packageVersion = '$(version)'
      $pipelineType = '$(PipelineType)'
      $sourceBranchName = '$(Build.SourceBranchName)'
      if ($sourceBranchName -eq 'main' -or $sourceBranchName -eq 'develop')
      {
        $packageVersion = $packageVersion + '.' + $sourceBranchName + '.' + $pipelineType
      }
      Write-Host "##vso[task.setvariable variable=packageVersion;]$packageVersion"
      Write-Host "##vso[task.setvariable variable=packageVersion;isOutput=true;]$packageVersion"

      Write-Host $packageVersion
      [xml]$publicNuspec = Get-Content -Path $(Build.SourcesDirectory)\build\NuSpecs\Microsoft.WindowsAppSDK.Foundation.nuspec
      $publicNuspec.package.metadata.version = $packageVersion
      Set-Content -Value $publicNuspec.OuterXml $(Build.SourcesDirectory)\build\NuSpecs\Microsoft.WindowsAppSDK.Foundation.nuspec

- task: PowerShell@2
  name: PackNuget
  inputs:
    filePath: 'BuildAll.ps1'
    arguments: -Platform "x64" -Configuration "release" -AzureBuildStep "PackNuget" -OutputDirectory "$(build.artifactStagingDirectory)\FullNuget" -PackageVersion "$(packageVersion)"

- ${{ if eq(parameters.SignOutput, 'true') }}:
  - task: EsrpCodeSigning@2
    inputs:
      ConnectedServiceName: 'Project Reunion ESRP Code Signing Connection'
      FolderPath: $(build.artifactStagingDirectory)\FullNuget
      Pattern: 'Microsoft.WindowsAppSDK.Foundation*.nupkg'
      UseMinimatch: true
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
          {
            "KeyCode" : "CP-401405",
            "OperationCode" : "NuGetSign",
            "Parameters" : {},
            "ToolName" : "sign",
            "ToolVersion" : "1.0"
          },
          {
              "KeyCode" : "CP-401405",
              "OperationCode" : "NuGetVerify",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          }
        ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'

- task: CopyFiles@2
  displayName: MoveToOutputDirectory
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\BuildOutput\FullNuget'
    TargetFolder: '$(ob_outputDirectory)\NugetContent'

- task: CopyFiles@2
  displayName: MoveToOutputDirectory
  inputs:
    SourceFolder: '$(build.artifactStagingDirectory)\FullNuget'
    TargetFolder: '$(ob_outputDirectory)\TransportPackage'

- ${{ if not( parameters.IsOneBranch ) }}:
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(ob_outputDirectory)'
      artifactName: '$(ob_artifactBaseName)'

# this mysterious guid fixes the "NuGetCommand@2 is ambiguous" error :-(
- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'NuGet push to ProjectReunion.nuget.internal'
  inputs:
    command: 'push'
    packagesToPush: '$(ob_outputDirectory)\TransportPackage\*.nupkg'
    verbosityPush: 'Detailed'
    nuGetFeedType: 'internal'
    #Note: The project qualifier is always required when using a feed name. Also, do not use organization scoped feeds.
    publishVstsFeed: 'ProjectReunion/Project.Reunion.nuget.internal'