parameters:
  buildPlatform: ''
  buildConfiguration: ''
  ImageName: ''
  TaefSelect: '*'
  BinaryCompatSwitch: ''
  testLocale: ''
steps:
  # Download the BuildOutput from the Build stage(s).
  # We only bring down the relevant content for this build config (Debug/Release) & platform, to save some space and time.
  - task: DownloadBuildArtifacts@0
    displayName: 'Download: BuildOutput'
    inputs:
      artifactName: 'BuildOutput'
      downloadPath: $(Build.SourcesDirectory)\BuildOutput

  # We only bring down the relevant content for this build config (Debug/Release) & platform, to save some space and time.
  - task: DownloadBuildArtifacts@0
    displayName: 'Download test dependencies'
    inputs:
      artifactName: 'packages'
      downloadPath: $(Build.SourcesDirectory)

    # We only bring down the relevant content for this build config (Debug/Release) & platform, to save some space and time.
  - task: DownloadBuildArtifacts@0
    displayName: 'Download: Test cert'
    inputs:
      artifactName: 'TestCert'
      downloadPath: $(Build.SourcesDirectory)\BuildOutput

  # When we download the test payload artifact, it extracts the contents under a folder with the artifact name, and there is no way to disable this.
  # So we need to move the contents up one level.
  #- powershell: |
     # Move-Item -Path $(Build.SourcesDirectory)\BuildOutput\BuildOutput\${{ parameters.buildConfiguration }}\${{ parameters.buildPlatform }} -Destination $(Build.SourcesDirectory)\BuildOutput
    # displayName: 'Move test binaries to BuildOutput folder'

  - script: |
      dir /s $(Build.SourcesDirectory)\BuildOutput\BuildOutput
    displayName: 'DIAG: dir testPayloadDir'

  - script: |
      dir /s $(Build.SourcesDirectory)\packages
    displayName: 'DIAG: dir taefPackage'

  - script: |
      dir /s $(Build.SourcesDirectory)\BuildOutput\TestCert
    displayName: 'DIAG: dir TestCert'

  - task: powerShell@2
    displayName: 'Install certificates in payload'
    inputs:
      targetType: 'inline'
      script: |
            $RegistryKeyPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock"
            if (-not(Test-Path -Path $RegistryKeyPath))
            {
                New-Item -Path $RegistryKeyPath -ItemType Directory -Force
            }

            New-ItemProperty -Path $RegistryKeyPath -Name AllowDevelopmentWithoutDevLicense -PropertyType DWORD -Value 1 -Force
            New-ItemProperty -Path $RegistryKeyPath -Name AllowAllTrustedApps -PropertyType DWORD -Value 1 -Force
            reg add HKLM\Software\Policies\Microsoft\Windows\Appx /v AllowDevelopmentWithoutDevLicense /t REG_DWORD /d 1 /f
            reg add HKLM\Software\Policies\Microsoft\Windows\Appx /v AllowAllTrustedApps /t REG_DWORD /d 1 /f

            foreach($cerFile in (Get-ChildItem -Path '$(Build.SourcesDirectory)\BuildOutput' '*.cer' -Recurse))
            {
              Write-Host "Adding cert $($cerFile.FullName)"
              certutil -addstore TrustedPeople $($cerFile.FullName)
              certutil -addstore root $($cerFile.FullName)
            }
  - task: powerShell@2
    displayName: 'Run dotnet installer'
    inputs:
      targetType: 'inline'
      script: |
            $(Build.SourcesDirectory)\packages\dotnet-windowsdesktop-runtime-installer.exe /quiet /install /norestart

  - task: powerShell@2
    displayName: 'Install VCLibs.Desktop'
    inputs:
      targetType: 'inline'
      script: |
            $package = "$(Build.SourcesDirectory)\packages\Microsoft.VCLibs.${{ parameters.buildPlatform }}.14.00.Desktop.appx"
            Add-AppxPackage $package -ErrorAction SilentlyContinue

  - task: powerShell@2
    displayName: 'Install vc_redist'
    inputs:
      targetType: 'inline'
      script: |
            $(Build.SourcesDirectory)\packages\vc_redist.${{ parameters.buildPlatform }}.exe /quiet /install /norestart

  - task: powershell@2
    displayName: 'Run TE.Service'
    inputs:
      targetType: filePath
      filePath: DevCheck.ps1
      arguments: -NoInteractive -Offline -Verbose -CheckTAEFService
      workingDirectory: '$(Build.SourcesDirectory)'



  - task: VisualStudioTestPlatformInstaller@1
    inputs:
      versionSelector: latestStable

  - task: PowerShell@2
    displayName: Add test locale to User Language List
    inputs:
      targetType: 'inline'
      script: |
            $langToAdd = "${{ parameters.testLocale }}"
            
            Write-Host "Adding $langToAdd to user language list"
            $langList = Get-WinUserLanguageList
            $langList.Insert(0, $langToAdd)
            Set-WinUserLanguageList -LanguageList $langList -Force

            Write-Host "Get-WinUserLanguageList:" 
            Get-WinUserLanguageList

  - task: PowerShell@2
    displayName: 'Run TAEF Tests'
    inputs:
      filePath: 'TestAll.ps1'
      arguments: >
        -OutputFolder "$(Build.SourcesDirectory)\BuildOutput\BuildOutput"
        -AzureBuildStep "RunTests" 
        -Platform "${{ parameters.buildPlatform }}" 
        -Configuration "${{ parameters.buildConfiguration }}"
        -ImageName "${{ parameters.ImageName }}"
        -TaefSelect "${{ parameters.TaefSelect }}"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Artifacts'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(testOutputArtifactDir)
      artifactName: TestResults

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: always()
    inputs:
      testResultsFormat: xUnit
      testResultsFiles: testResults-*.xml
      searchFolder: '$(Build.SourcesDirectory)\BuildOutput'
      mergeTestResults: true
      failTaskOnFailedTests: true 
      testRunTitle: '$(Agent.JobName)'
      buildPlatform: ${{ parameters.buildPlatform }}
      buildConfiguration: ${{ parameters.buildConfiguration }}
