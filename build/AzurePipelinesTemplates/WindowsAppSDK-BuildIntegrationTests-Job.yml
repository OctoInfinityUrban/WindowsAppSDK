parameters:
  - name: NuGetServiceConnectionName
    type: string
    default: 'ProjectReunionInternal'

jobs:
- job: BuildIntegrationTest
  condition: succeeded()
  pool: $(ProjectReunionBuildPool)
  variables:
    WindowsAppSDKPackageVersion: $[ dependencies.CreateNugetPackage.outputs['SetVersion.packageVersion'] ]
  steps:
    - checkout: git://ProjectReunion/ProjectReunionInternal@user/kythant/testAllUpdate

    - task: NuGetAuthenticate@0
      inputs:
        nuGetServiceConnections: ${{ parameters.NuGetServiceConnectionName }}

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Installer x64 for Download Center'
      inputs:
        source: 'specific'
        project: '$(System.TeamProjectId)'
        pipeline: '57248'
        runVersion: 'specific'
        pipelineId: 42815501
        artifactName: WindowsAppSDKNugetPackage
        path: '$(Build.SourcesDirectory)\temp'

    # - task: DownloadBuildArtifacts@0
    #   inputs:
    #     artifactName: WindowsAppSDKNugetPackage
    #     downloadPath: '$(Build.SourcesDirectory)\build\packages'
    #     itemPattern: |
    #       **/*.nupkg

    - task: PowerShell@2
      displayName: Extract WindowsAppSDKVersion
      inputs:
        targetType: 'inline'
        script: |
          $files = Get-ChildItem $(Build.SourcesDirectory)\temp
          foreach ($file in $files) # Iterate through each package we restored in the directory
          {
            Write-Host "file:" $file.FullName
            $nupkgPaths = Get-ChildItem $file.FullName -Filter "*.nupkg"

            # Extract nupkg to access the nuspec
            # The files in this directory does not contain the nuspec by default
            foreach ($nupkgPath in $nupkgPaths)
            {
              Write-Host "nupkgPath:" $nupkgPath.FullName
              Copy-Item $nupkgPath.FullName -Destination $(Build.SourcesDirectory)\build\packages

              $rename = $nupkgPath.Name + ".zip"
              Rename-Item $nupkgPath.FullName $rename
              $renamedFilePath = $nupkgPath.FullName + ".zip"
              $dest = $file.FullName + "/contents"
              Expand-Archive $renamedFilePath -Destination $dest
            }
            
            $nuspecPaths = Get-ChildItem $file.FullName -Recurse -Filter "*.nuspec"
            foreach ($nuspecPath in $nuspecPaths)
            {
              Write-Host "Found Nuspecs"
              Write-Host "Comparing dependencies in " $nuspecPath.Name
              [xml]$nuspec = Get-Content -Path $nuspecPath.FullName
              if ($nuspec.package.metadata.id -eq 'Microsoft.WindowsAppSDK')
              {
                $version = $nuspec.package.metadata.version
                Write-Host "Found " $version
                Write-Host "##vso[task.setvariable variable=WindowsAppSDKPackageVersion;]$version"
                Exit 0
              }
            }
          }
          Exit 1

    - script: |
        dir /s $(Build.SourcesDirectory)
      displayName: 'DEBUG'

    - task: PowerShell@2
      name: TestAll
      displayName: TestAll
      inputs:
        filePath: 'TestAll.ps1'
        arguments: -WindowsAppSDKPackageVersion "$(WindowsAppSDKPackageVersion)" -YamlStep "BuildTests" -Checkpoint "none" -Platform "x86,x64,arm64" -Configuration "release,debug"

