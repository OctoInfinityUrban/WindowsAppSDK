

# This yml template checkouts the ProjectReunionInternal repository and builds the 
# WindowsAppSDK based on the version.details.xml of the checkouted repository.
# This versions provided in "TransportPackages" parameter of the yml will replace the 
# versions in the checkouted version.details.xml based on the name.
# 
# Requirements:
# - This yml template can only be called in the "microsoft" AzureDevOps 
# - Access to ProjectReunionCerts keyvault
# - Access to ProjectReunion Internal feed
# - Only the ProjectReunionInternal repository is checkout in the job
#
# The template eng\common\AzurePipelinesTemplates\WindowsAppSDK-BuildSetup-Steps.yml
# will facilitate setting up the requirements to sucessfully run this template. 
# 
# The intended use of this yml template is for the feeder repos' pipeline to build the WinAppSDK package
# with the latest versions from ProjectReunionInternal with the latest version of the transport package it 
# has just built
#
# The WindowsAppSDK Nuget package produced will be published to WindowsAppSDKNugetPackage build artifacts 
jobs:
- job: BuildIntegrationTest
  condition: succeeded()
  pool: $(ProjectReunionBuildPool)
  variables:
    WindowsAppSDKPackageVersion: $[ dependencies.CreateNugetPackage.outputs['SetVersion.packageVersion'] ]
  steps:
    - checkout: git://ProjectReunion/ProjectReunionInternal@user/ejohn/testAll

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Installer x64 for Download Center'
      inputs:
        source: 'specific'
        project: '$(System.TeamProjectId)'
        pipeline: '57248'
        runVersion: 'specific'
        pipelineId: 42815501
        artifactName: WindowsAppSDKNugetPackage
        path: '$(Build.SourcesDirectory)\build\packages'

    # - task: DownloadBuildArtifacts@0
    #   inputs:
    #     artifactName: WindowsAppSDKNugetPackage
    #     downloadPath: '$(Build.SourcesDirectory)\build\packages'
    #     itemPattern: |
    #       **/*.nupkg

    - task: PowerShell@2
      displayName: Extract WindowsAppSDKVersion
      inputs:
        targetType: 'inline'
        script: |
          $files = Get-ChildItem $(Build.SourcesDirectory)\build\packages
          foreach ($file in $files) # Iterate through each package we restored in the directory
          {
            Write-Host "file:" $file.FullName
            $nupkgPaths = Get-ChildItem $file.FullName -Filter "*.nupkg"

            # Extract nupkg to access the nuspec
            # The files in this directory does not contain the nuspec by default
            foreach ($nupkgPath in $nupkgPaths)
            {
              $rename = $nupkgPath.Name + ".zip"
              Rename-Item $nupkgPath.FullName $rename
              $renamedFilePath = $nupkgPath.FullName + ".zip"
              $dest = $file.FullName + "/contents"
              Expand-Archive $renamedFilePath -Destination $dest
            }
            
            $nuspecPaths = Get-ChildItem $file.FullName -Recurse -Filter "*.nuspec"
            foreach ($nuspecPath in $nuspecPaths)
            {
              Write-Host "Found Nuspecs"
              Write-Host "Comparing dependencies in " $nuspecPath.Name
              [xml]$nuspec = Get-Content -Path $nuspecPath.FullName
              if ($nuspec.package.metadata.id -eq 'Microsoft.WindowsAppSDK')
              {
                $version = $nuspec.package.metadata.version
                Write-Host "Found " $version
                Write-Host "##vso[task.setvariable variable=WindowsAppSDKPackageVersion;]$version"
                Exit 0
              }
            }
          }
          Exit 1

    - task: PowerShell@2
      name: TestAll
      displayName: TestAll
      inputs:
        filePath: 'TestAll.ps1'
        arguments: -WindowsAppSDKPackageVersion "$(WindowsAppSDKPackageVersion)" -YamlStep "BuildTests" -Checkpoint "none" -Platform "x86,x64,arm64" -Configuration "release,debug"

