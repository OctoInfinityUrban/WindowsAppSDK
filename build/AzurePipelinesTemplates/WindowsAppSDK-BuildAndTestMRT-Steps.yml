parameters:
  - name: MRTSourcesDirectory
    type: string
    default: $(Build.SourcesDirectory)\dev\MRTCore
  - name: MRTBinariesDirectory
    type: string
    default: $(Build.SourcesDirectory)\BuildOutput
  - name: RunSDLBinaryAnalysis
    type: boolean
    default: true
  - name: enablePREFast
    type: string
    default: true

steps:
- template: WindowsAppSDK-SetupBuildEnvironment-Steps.yml

# Begin forking into 2 code paths: 1) Use BuildAll.ps1 to build the target when _not_ running PREFast, 2) Use the *SBuild task to build the  
# target when running PREFast.

- ${{ if and(eq(parameters.RunSDLBinaryAnalysis, 'true'), eq(parameters.EnablePREFast, 'true')) }}:
  # PREFast scan is enabled in this pipeline run, so we pass PreFastSetup to BuildAll.ps1 to get it to do the commonn setup steps, but short of
  # building the target via MSBuild.exe
  - task: PowerShell@2
    name: PreFastSetup
    inputs:
      filePath: 'BuildAll.ps1'
      arguments: -Platform "$(buildPlatform)" -Configuration "$(buildConfiguration)" -AzureBuildStep "PreFastSetup"

  # The PREFast task below only supports the VSBuild/MSbuild task, _not_ a direct call to MSBuild.exe.
  - task: MSBuild@1
    displayName: 'build MrtCore with MSBuild'
    inputs:
      platform: '$(buildPlatform)'
      solution: '${{ parameters.MRTSourcesDirectory }}\mrt\MrtCore.sln'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '/restore /binaryLogger:${{ parameters.MRTBinariesDirectory }}/mrtcore.$(buildPlatform).$(buildConfiguration).binlog'

  # ToDo: This step is a workaround for b#43856157. We can potentially remove this step once the bug is fixed. 
  - task: UseDotNet@2
    inputs:
      packageType: sdk
      version: '6.x'

  # ToDo: WindowsAppSDK-BinaryAnalysis-steps.yml below ultimately invokes SDLNativeRules@2, which is out of support.
  # So for the time being, we explicitly call SDLNativeRules@3, which is currently supported. Consider eliminating this 
  # extra step when we run PREFast as part of WindowsAppSDK-BinaryAnalysis-steps.yml below.
  - task: SDLNativeRules@3
    displayName: 'Guardian: PreFast@3'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    continueOnError: true
    inputs:
      userProvideBuildInfo: 'auto'
      toolVersion: Latest

- ${{ if or(ne(parameters.RunSDLBinaryAnalysis, 'true'), ne(parameters.EnablePREFast, 'true')) }}:
  # PREFast scan is disabled in this pipeline run, just proceed to build the MRT via BuildAll.ps1, and
  # fall through to run BinaryAnalysis with PREFast turned off.
  - task: PowerShell@2
    name: BuildBinaries
    inputs:
      filePath: 'BuildAll.ps1'
      arguments: -Platform "$(buildPlatform)" -Configuration "$(buildConfiguration)" -AzureBuildStep "BuildMRT"

# End of forked code paths.

# Common code for performing Binary Analysis.
- ${{ if eq(parameters.RunSDLBinaryAnalysis, 'true') }}:
  - template: WindowsAppSDK-BinaryAnalysis-steps.yml
    parameters:
      outputDirectory: 'BuildOutput'
      # ToDo: Enable PREFast to run downstream from here, once the SDL template has been updated to invoke the 
      # newer SDLNativeRules@3 task, and remove the explicit call to it above.
      enablePREFast: false

# component detection must happen *within* the build task
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0

- task: PublishBuildArtifacts@1
  displayName: 'Publish mrtcore binlog'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/BuildOutput/mrtcore.$(buildPlatform).$(buildConfiguration).binlog
    artifactName: binlogs

# Run the test locally on the Azure VM.
# Note arm is currently not exercised.
- task: VSTest@2
  displayName: 'test MRT: ManagedTests'
  condition: and(succeeded(), or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64')))
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\MrtCoreManagedTest.build.appxrecipe'
    searchFolder: 'BuildOutput\$(buildConfiguration)\$(buildPlatform)\MrtCoreManagedTest'
    testRunTitle: 'test MRT: ManagedTests - $(buildPlatform)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'test MRT: UnitTests'
  # These 3 MRT test suites were previously being run in Helix, but they are now being run via WindowsAppSDK-RunTestsInPipeline-Job.yml instead.
  # Resort to running these tests right here on the current job agent if and only if we've got here from ProjectReunion-CI.yml, because we won't 
  # be running these tests via WindowsAppSDK-RunTestsInPipeline-Job.yml later in this specific flow. Otherwise, we can generally skip these tests.
  condition: and(and(succeeded(), or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64'))), in(variables['Build.Reason'], 'IndividualCI', 'BatchCI'))
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\MrmUnitTest.dll'
    searchFolder: 'BuildOutput\$(buildConfiguration)\$(buildPlatform)\MrmUnitTest'
    testRunTitle: 'test MRT: UnitTests - $(buildPlatform)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'test MRT: BaseUnitTests'
  condition: and(and(succeeded(), or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64'))), in(variables['Build.Reason'], 'IndividualCI', 'BatchCI'))
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\MrmBaseUnitTests.dll'
    searchFolder: 'BuildOutput\$(buildConfiguration)\$(buildPlatform)\MrmBaseUnitTests'
    testRunTitle: 'test MRT: BaseUnitTests - $(buildPlatform)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'test MRT: UnpackagedTests'
  condition: and(and(succeeded(), or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64'))), in(variables['Build.Reason'], 'IndividualCI', 'BatchCI'))
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\MRTCoreUnpackagedTests.dll'
    searchFolder: 'BuildOutput\$(buildConfiguration)\$(buildPlatform)\MrtCoreUnpackagedTests'
    testRunTitle: 'test MRT: UnpackagedTests - $(buildPlatform)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
