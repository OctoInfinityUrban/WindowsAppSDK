<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. See LICENSE in the project root for license information. -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="WinAppSDKContainmentSetterTarget" BeforeTargets="XamlPreCompile;CoreCompile"
          Condition="'$(WindowsAppSDKRuntimePatchMode)' != '' or '$(WindowsAppSDKRuntimePatchMode2)' != '' or '$(WindowsAppSDKDisabledChanges)' != ''">
    <PropertyGroup>
      <WinAppSDKContainmentSetterFile>$(GeneratedFilesDir)WinAppSDKContainmentSetterCS.cs</WinAppSDKContainmentSetterFile>
      <WinAppSDKContainmentPatchMode1Lines Condition="'$(WindowsAppSDKRuntimePatchMode)' != ''">
            compatibilityOptions.PatchMode1 = new WindowsAppRuntimeVersion($(WindowsAppSDKRuntimePatchMode))%3B
      </WinAppSDKContainmentPatchMode1Lines>
      <WinAppSDKContainmentPatchMode2Lines Condition="'$(WindowsAppSDKRuntimePatchMode2)' != ''">
            compatibilityOptions.PatchMode2 = new WindowsAppRuntimeVersion($(WindowsAppSDKRuntimePatchMode2))%3B
      </WinAppSDKContainmentPatchMode2Lines>
      <WinAppSDKContainmentDisabledChangesLines Condition="'$(WindowsAppSDKDisabledChanges)' != ''">
            var disabledChangesArray = new System.UInt64[] { $(WindowsAppSDKDisabledChanges) }%3B
            foreach (var changeId in disabledChangesArray)
            {
                compatibilityOptions.DisabledChanges.Add(changeId)%3B
            }
      </WinAppSDKContainmentDisabledChangesLines>
      
      <WinAppSDKContainmentSetterFileLines>
// This file is generated by the build based on project properties.
namespace WindowsAppRuntime.Containment.Configuration
{
/*
    struct WindowsAppRuntimeVersion
    {
        uint Major%3B uint Minor%3B uint Patch%3B
        internal WindowsAppRuntimeVersion(uint major, uint minor, uint patch) { Major = major%3B Minor = minor%3B Patch = patch%3B }
        public override string ToString() { return $"{Major}.{Minor}.{Patch}"%3B }
    }
    
    class CompatibilityOptions
    {
        public WindowsAppRuntimeVersion PatchMode1 = null%3B
        public WindowsAppRuntimeVersion PatchMode2 = null%3B
        public System.Collections.Generic.IList&lt;System.UInt64&gt; DisabledChanges = new System.Collections.Generic.IList&lt;System.UInt64&gt;()%3B
        public void Apply() { System.Diagnostics.Debug.WriteLine("Applying containment options. PatchModes: " + this.PatchMode1 + "," + this.PatchMode2 + " Disabled changes: " + string.Join(",",this.DisabledChanges.ToArray()))%3B }
    }
    */

    class AutoInitialize
    {
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        internal static void ConfigureContainment()
        {
            var compatibilityOptions = new CompatibilityOptions()%3B
$(WinAppSDKContainmentPatchMode1Lines)
$(WinAppSDKContainmentPatchMode2Lines)
$(WinAppSDKContainmentDisabledChangesLines)
            compatibilityOptions.Apply()%3B
        }
    }
}
</WinAppSDKContainmentSetterFileLines>
        </PropertyGroup>
        <WriteLinesToFile
            File="$(WinAppSDKContainmentSetterFile)" Lines="$(WinAppSDKContainmentSetterFileLines)"
            Overwrite="true"
            WriteOnlyWhenDifferent="true" />
        <!--
    -->
    </Target>

</Project>
