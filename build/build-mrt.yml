# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

#name: $(BuildDefinitionName)-$(date:yyMM).$(date:dd)$(rev:rrr)
parameters:
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
  MRTSourcesDirectory: $(Build.SourcesDirectory)\dev\MRTCore
  MRTBinariesDirectory: $(Build.SourcesDirectory)\BuildOutput

steps:
- task: BatchScript@1
  displayName: Set up environment
  inputs:
    filename: '${{ parameters.MRTSourcesDirectory }}\build\init.cmd'
    arguments: /envonly $(buildPlatform)fre
    modifyEnvironment: true

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet 5.6'
  inputs:
    versionSpec: 5.6
  continueOnError: true

# Start restoring packages for C++ projects. The C# ones will be restored by the build task
# NuGetCommand@2
- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'NuGet restore of core'
  inputs:
    command: 'custom'
    arguments: 'restore ${{ parameters.MRTSourcesDirectory }}\mrt\core\src\packages.config -ConfigFile nuget.config -PackagesDirectory ${{ parameters.MRTSourcesDirectory }}\mrt\packages'

# NuGetCommand@2
- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'NuGet restore of applicationmodel'
  inputs:
    command: 'custom'
    arguments: 'restore ${{ parameters.MRTSourcesDirectory }}\mrt\microsoft.applicationmodel.resources\src\packages.config -ConfigFile nuget.config -PackagesDirectory ${{ parameters.MRTSourcesDirectory }}\mrt\packages'

# NuGetCommand@2
- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'NuGet restore of mrmex'
  inputs:
    command: 'custom'
    arguments: 'restore ${{ parameters.MRTSourcesDirectory }}\mrt\mrm\mrmex\packages.config -ConfigFile nuget.config -PackagesDirectory ${{ parameters.MRTSourcesDirectory }}\mrt\packages'

# NuGetCommand@2
- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'NuGet restore of mrmmin'
  inputs:
    command: 'custom'
    arguments: 'restore ${{ parameters.MRTSourcesDirectory }}\mrt\mrm\mrmmin\packages.config -ConfigFile nuget.config -PackagesDirectory ${{ parameters.MRTSourcesDirectory }}\mrt\packages'

# NuGetCommand@2
- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'NuGet restore of mrm unittests'
  inputs:
    command: 'custom'
    arguments: 'restore ${{ parameters.MRTSourcesDirectory }}\mrt\mrm\unittests\packages.config -ConfigFile nuget.config -PackagesDirectory ${{ parameters.MRTSourcesDirectory }}\mrt\packages'

#  - task: powershell@2
#    displayName: 'Install the VS build tools'
#    inputs:
#      targetType: filePath
#      filePath: ${{ parameters.MRTSourcesDirectory }}\build\Initialize-InstallMSBuild.ps1
#      arguments: '-installDir ${{ parameters.MRTSourcesDirectory }}\.buildtools -logsDir ${{ parameters.MRTSourcesDirectory }}\msbuild-install-logs'
    
#  - task: BatchScript@1
#    displayName: Add the VS build tools to the path
#    inputs:
#      filename: '${{ parameters.MRTSourcesDirectory }}\build\SetMSBuildVars.cmd'
#      arguments: '${{ parameters.MRTSourcesDirectory }}\.buildtools'
#      modifyEnvironment: true

#  - task: PublishBuildArtifacts@1
#    displayName: 'Publish install logs'
#    condition: Failed()
#    inputs:
#      PathtoPublish: '${{ parameters.MRTSourcesDirectory }}\msbuild-install-logs'
#      artifactName: 'installlogs'

- task: powershell@2
  displayName: 'Installing .NET SDK'
  inputs:
    targetType: filePath
    workingDirectory: ${{ parameters.MRTSourcesDirectory }}\build
    filePath: ${{ parameters.MRTSourcesDirectory }}\build\DownloadDotNetCoreSdk.ps1 

- task: BatchScript@1
  displayName: 'Use .NET SDK'
  inputs:
    filename: '${{ parameters.MRTSourcesDirectory }}\build\SetDotnetVars.cmd'
    arguments: '${{ parameters.MRTSourcesDirectory }}'
    modifyEnvironment: true

- task: powershell@2
  displayName: 'Download .net runtime Windows installer'
  inputs:
    targetType: filePath
    workingDirectory: ${{ parameters.MRTSourcesDirectory }}\build
    filePath: ${{ parameters.MRTSourcesDirectory }}\build\DownloadDotNetRuntimeInstaller.ps1

#  - task: BatchScript@1
#    displayName: 'Debug'
#    inputs:
#      filename: '$(Build.SourcesDirectory)\build\debug-pipeline.cmd'

- task: MSBuild@1
  displayName: 'build MrtCore'
  inputs:
#      msbuildLocationMethod: 'location'
#      msbuildLocation: ${{ parameters.MRTSourcesDirectory }}\.buildtools\MSBuild\Current\Bin\MSBuild.exe
    platform: '$(buildPlatform)'
    solution: '${{ parameters.MRTSourcesDirectory }}\mrt\MrtCore.sln'
    configuration: '$(buildConfiguration)'
    msbuildArguments: '/restore /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="${{ parameters.appxPackageDir }}" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /binaryLogger:$(Build.SourcesDirectory)/mrtcore.$(buildPlatform).$(buildConfiguration).binlog'

- task: PublishBuildArtifacts@1
  displayName: 'Publish mrtcore binlog'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/mrtcore.$(buildPlatform).$(buildConfiguration).binlog
    artifactName: binlogs

- task: VSTest@2
  displayName: 'test MRT (Managed)'
  condition: and(succeeded(), or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64')))
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\ManagedTest.build.appxrecipe
    searchFolder: '${{ parameters.MRTBinariesDirectory }}\Release\$(buildPlatform)'
    testRunTitle: 'test MRT $(buildPlatform)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: CmdLine@2
  displayName: 'test MRT - UnitTest'
  inputs:
    script: |
      echo te.exe UnitTest.dll /enablewttlogging /appendwttlogging /logFile:%LogPath%
      te.exe UnitTest.dll /enablewttlogging /appendwttlogging /logFile:%LogPath%
    workingDirectory: '${{ parameters.MRTBinariesDirectory }}\$(buildConfiguration)\$(buildPlatform)\UnitTest'
  env:
    LogPath: ${{ parameters.MRTBinariesDirectory }}\$(buildConfiguration)\$(buildPlatform)\UnitTest\MrtUnitTest.wtl
  condition: or(eq(variables.buildPlatform, 'x64'), eq(variables.buildPlatform, 'x86'))

- task: PowerShell@2
  displayName: 'Convert Test Logs from WTL to xUnit format'
  inputs:
    targetType: filePath
    filePath: build\Helix\ConvertWttLogToXUnit.ps1
    arguments: -WttInputPath '${{ parameters.MRTBinariesDirectory }}\$(buildConfiguration)\$(buildPlatform)\UnitTest\MrtUnitTest.wtl' -WttSingleRerunInputPath 'unused.wtl' -WttMultipleRerunInputPath 'unused2.wtl' -XUnitOutputPath 'onBuildMachineResults.xml' -TestNamePrefix '$(BuildConfiguration).$(BuildPlatform)'
  condition: or(eq(variables['BuildPlatform'], 'x64'), eq(variables['BuildPlatform'], 'x86'))

- task: PublishTestResults@2
  displayName: 'Upload converted test logs'
  inputs:
    testResultsFormat: 'xUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
    testResultsFiles: '**/onBuildMachineResults.xml' 
    searchFolder: '${{ parameters.MRTBinariesDirectory }}\$(buildConfiguration)\$(buildPlatform)'
    #mergeTestResults: false # Optional
    #failTaskOnFailedTests: false # Optional
    testRunTitle: 'test MRT - On Build Machine Tests' # Optional
    buildPlatform: $(BuildPlatform) # Optional
    buildConfiguration: $(BuildConfiguration) # Optional
    #publishRunAttachments: true # Optional
  condition: or(eq(variables['BuildPlatform'], 'x64'), eq(variables['BuildPlatform'], 'x86'))

- task: CopyFiles@2
  displayName: 'test MRT - Copy result logs to Artifacts'
  inputs:
    Contents: |
     **/*.wtl
     **/*onBuildMachineResults.xml
     ${{ parameters.MRTBinariesDirectory }}\$(buildConfiguration)\$(buildPlatform)\UnitTest\MrtUnitTest.wtl
    TargetFolder: '$(Build.ArtifactStagingDirectory)\mrt_test\$(buildConfiguration)\$(buildPlatform)'
    OverWrite: true
    flattenFolders: true
  condition: or(eq(variables['BuildPlatform'], 'x64'), eq(variables['BuildPlatform'], 'x86'))

- task: VSTest@2
  displayName: 'test MRT'
  condition: and(succeeded(), or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64')))
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*test*.dll
      !**\*TestAdapter.dll
      !**\TE.*.dll
      !**\obj\**
      !**\MrtCoreUnpackagedTests.dll
      !**\Unittest.dll
    searchFolder: '${{ parameters.MRTBinariesDirectory }}\$(buildConfiguration)\$(buildPlatform)'
    testRunTitle: 'test MRT $(buildPlatform)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: ComponentGovernanceComponentDetection@0
  inputs:
    scanType: 'Register'
    verbosity: 'Verbose'
    alertWarningLevel: 'Medium'
    failOnAlert: true

- task: CopyFiles@2
  displayName: 'copy binaries for signing'
  inputs:
    SourceFolder: '${{ parameters.MRTBinariesDirectory }}\Release\$(buildPlatform)'
    Contents: |
      mrm\mrm.dll
      mrm\mrm.lib
      mrm\mrm.pdb
      Microsoft.ApplicationModel.Resources\Microsoft.ApplicationModel.Resources.dll
      Microsoft.ApplicationModel.Resources\Microsoft.ApplicationModel.Resources.pdb
    TargetFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\lib\$(buildPlatform)'
    flattenFolders: true

- task: CopyFiles@2
  displayName: 'copy projection binaries and symbols for signing'
  condition: and(succeeded(), eq(variables['buildPlatform'], 'x86'))
  inputs:
    SourceFolder: '${{ parameters.MRTBinariesDirectory }}\Release\$(buildPlatform)\Microsoft.ApplicationModel.Resources.Projection'
    Contents: |
      Microsoft.ApplicationModel.Resources.Projection.dll
      Microsoft.ApplicationModel.Resources.Projection.pdb
    TargetFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\lib\anycpu\net5.0'
    flattenFolders: false

- task: CopyFiles@2
  displayName: 'copy winmd for signing'
  condition: and(succeeded(), eq(variables['buildPlatform'], 'x86'))
  inputs:
    SourceFolder: '${{ parameters.MRTBinariesDirectory }}\Release\$(buildPlatform)\Microsoft.ApplicationModel.Resources'
    Contents: |
      Microsoft.ApplicationModel.Resources.winmd
    TargetFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\lib\anycpu'
    flattenFolders: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Binaries'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\mrt_raw'
    ArtifactName: 'mrtcore_binaries'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: MRT Test results'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\mrt_test'
    ArtifactName: 'mrtcore_test'
